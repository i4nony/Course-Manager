syntax  = "proto2";

message AesKey {
    optional int32 size  = 1;
    optional bytes key  = 2;
}

message BaseRequest {
    optional bytes aesKey  = 1;
    optional int32 uin  = 2;
    optional bytes deviceId  = 3;
    optional int32 clientVersion  = 4;
    optional string osVersion  = 5;
    optional int32 scene  = 6;
}

message GetLoginQRCodeRequest {
    optional BaseRequest baseRequest  = 1;
    optional AesKey aesKey  = 2;
    optional int32 unknown3  = 3;
}

message QRCode {
    optional int32 size  = 1;
    optional bytes image  = 2;
}

message GetLoginQRCodeResponse {
    optional QRCode qrCode  = 2;
    optional string qrCodeKey  = 3;
    optional AesKey aesKey  = 5;
}

message CheckLoginQRCodeRequest {
    optional BaseRequest baseRequest  = 1;
    optional AesKey aesKey  = 2;
    optional string qrCodeKey  = 3;
    optional int32 timestamp  = 4;
    optional int32 unknown5  = 5;
}

message CheckLoginQRCodeResponse {
    message CheckResult {
        message Content {
            optional int32 size  = 1;
            optional bytes encryptedUserInfo  = 2;
        }
        optional Content content  = 1;
    }
    optional CheckResult checkResult  = 3;
}

message UserInfo {
    optional string wxid  = 3;
    optional string encrypted_password  = 4;
    optional string headImgUrl  = 5;
    optional string nickname  = 7;
}

message Ecdh {
    optional int32 nid  = 1;        //椭圆曲线类型
    message EcdhKey {
        optional int32 size  = 1;
        optional bytes key  = 2;       //椭圆曲线client pubkey
    }
    optional EcdhKey ecdhKey  = 2;
}

message UserLoginRequest {
    optional AesKey aesKey  = 1;    //仅用于本次登录请求,后续通讯使用的aeskey根据服务器返回的数据做ECDH生成
    optional Ecdh ecdh  = 2;
    optional string wxid  = 3;
    optional string encryptedPassword  = 4;
}

message DeviceInfo {
    optional BaseRequest baseRequest  = 1;
    message Unknown2 {
        optional bytes unknown7  = 7;
    }
    optional Unknown2 unknown2  = 2;
    optional string imei  = 3;
    optional string softInfoXml  = 4;
    optional int32 unknown5  = 5;
    optional string imeiAndTimestamp  = 6;
    optional string loginDeviceName  = 8;
    optional string loginDevice  = 9;
    optional string language  = 10;
    message Unknown11 {
        optional int32 unknown6  = 6;
        optional int32 unknown7  = 7;
    }
    optional Unknown11 unknown11  = 11;
    optional int32 unknown13  = 13;
    optional int32 timestamp  = 14;
    optional string deviceBrand  = 15;
    optional string realCountry  = 18;
    optional string packageName  = 19;
    optional string uuid  = 20;
    optional string deviceModel  = 21;
    optional int32 unknown22  = 22;
}

message AutoLoginKey {
    optional int32 length  = 1;
    message AutoAuthKey {
        optional AesKey aesKey  = 1;
        message KeyHolder {
            optional int32 length  = 1;
            message Key {
                optional int32 length  = 1;
                optional bytes key = 2;
                optional int32 unknown3 = 3;
            }
        }
        optional KeyHolder keyHolder = 2;
    }
}

message LoginResponse {
    message Session {
        optional int32 uin  = 1;
        optional Ecdh ecdh  = 2;

        message SessionKey {
            optional int32 len  = 1;
            optional bytes encryptedKey  = 2;
        }
        optional SessionKey sessionKey  = 3; //加密的sessionKey 需要使用ECDH握手后的密钥做AES解密得到最终长16字节的aeskey
        optional bytes autoLoginKey = 4;
    }
    optional Session session  = 3;
}

message Data {
    optional int32 len  = 1;
    optional bytes data  = 2;
}

message CommonResponse {
    optional int32  type  = 1;      //消息类型:1==>个人信息,2==>好友信息,5==>服务器上未读取的最新消息,其余消息类型暂未知
    optional Data data  = 2;
}

message InitRequest {
    optional BaseRequest baseRequest  = 1;
    optional string wxid  = 2;
    optional bytes syncKeyCur  = 3;    //首次初始化时sync_key_cur  = ''
    optional bytes syncKeyMax  = 4;    //首次初始化时sync_key_max  = ''
    optional string language  = 5;
}

message InitResponse {
    optional bytes syncKeyCur  = 2;                //当前synckey二进制数据
    optional bytes syncKeyMax  = 3;                //最新synckey二进制数据(若与sync_key_cur不相同,则continue_flag返回1,表示需要继续初始化)
    optional int32 continueFlag  = 4;                //为1时表示仍要继续调用newinit初始化,直到该标志位返回0停止初始化(联系人或未读消息数据太多,无法一次获取完毕)
    optional int32 messageCount  = 6;                //结构体数量
    repeated CommonResponse commonResponse  = 7;                //需要根据消息类型解析
}

message SyncRequest {
    message Unknown1 {
        optional int32 unknown1  = 1;
    }
    optional Unknown1  unknown1  = 1;      //unknown,must be 0
    optional int32 unknown2  = 2;      //unknown,just set 7
    optional bytes syncKey  = 3;      //同步成功后服务器返回的消息id
    optional int32 scene  = 4;      //unkown,just set 3
    optional string osVersion  = 5;
    optional int32  unknown6  = 6;      //unknown,just set 1
}

message SyncResponse {
    message MessageWrap {
        optional int32  messageCount  = 1;
        repeated CommonResponse commonResponse  = 2;    //需要根据消息类型解析
    }
    optional MessageWrap messageWrap  = 2;   //未读消息
    optional bytes syncKey  = 4;          //服务器返回的sync key
}

message SyncKey {
    optional int32  length  = 1;    //MsgKey总长度
    message MsgKey
    {
        optional int32 count  = 1;    //消息类型数量
        message Key
        {
            optional int32 type  = 1;       //消息类型
            optional int64 key  = 2;       //服务器消息id(通常每个消息加1,但不是从0开始)
        }
        repeated Key key  = 2;    //每种消息类型都有单独的synckey
    }
    optional MsgKey msgkey  =2;     //synckey
}

message Wxid {
    optional string id  = 1;
}

message CommonMessage {
    optional int64 serverId  = 1;
    optional Wxid from  = 2;       //发送方wxid
    optional Wxid to  = 3;       //接收方wxid
    optional int32 type  = 4;       //消息类型:9999==>系统垃圾消息,10002==>sysmsg(系统垃圾消息),49==>appmsg,1==>文字消息,10000==>系统提示
    message Content {
        optional string content  = 1;
    }
    optional Content raw  = 5;       //原始消息内容,需要根据不同消息类型解析
    optional bytes addtionalContent  = 8;
    optional int32 createTime  = 9;       //消息发送时间
    optional string addtionalInfo  = 10;       //消息附加内容(群是否屏蔽,群人数,群at功能)
    optional string xmlContent  = 11;       //推送内容(xml格式)
    optional uint64 newMsgId  = 12;          //每条消息的唯一id
    optional int32 msgId  = 13;       //sync key中的id
}

message SendMessageRequest {
    optional int32 count  = 1;      //本次发送的消息数量
    message SendMessageInfo {
        optional Wxid to  = 1;       //to wxid
        optional bytes content  = 2;       //消息内容
        optional int32 type  = 3;       //消息类型: 文字消息=>1,名片=>42，
        optional int32 timestamp  = 4;
        optional int32 clientId  = 5;       //不同消息的utc与client_id必须至少有1个不相同
        optional string at  = 6;       //群聊at功能
    }
    repeated SendMessageInfo info  = 2;    //这里可以是repeated,允许一次发送多条消息
}

message CommonResult {
    optional int32 code  = 1;
    optional string message  = 2;
}

message SendMessageResponse {
    optional int32 count  = 2;
    message Result {
        optional int32 code  = 1;        //错误码 0=>发送成功,-44=>对方开启了朋友验证(被删好友),-22=>消息已发出,但被对方拒收了(被拉黑)
        optional Wxid  to  = 2;        //to wxid
        optional int32 type  = 7;        //消息类型
        optional int64 serverId  = 8;        //消息唯一id
    }
    repeated Result result  = 3;     //发送结果
}

message MemberInfo {
    optional Wxid wxid  = 1;
}

message CreateChatRoomRequest {
    optional BaseRequest baseRequest  = 1;     //登录信息
    message Unknown2 {
        optional string unknown1  = 1;
    }
    optional Unknown2 unknown2  = 2;
    optional int32 count  = 3;     //群成员数量
    repeated MemberInfo member  = 4;     //群成员信息
    optional int32 unknown5  = 5;
}

message CreateChatRoomResponse {
    message Result {
        optional int32 code  = 1;     //错误码
        message ErrorMsg {
            optional string msg  = 1;     //错误信息
        }
        optional ErrorMsg errorMsg  = 2;
    }
    optional Result result  = 1;     //建群结果
    optional int32 count  = 5;     //群成员数量
    repeated MemberInfo member  = 6;
    optional Wxid wxid  = 7;     //新建群聊wxid
    message ChatRoomAvatar {
        optional int32 length  = 1;     //群头像raw data大小
        optional bytes data  = 2;      //群头像 jpg格式 raw data
    }
    optional ChatRoomAvatar avatar  = 8;     //群头像
}

message AddChatRoomMemberRequest {
    optional BaseRequest baseRequest  = 1;
    optional int32 count  = 2;     //本次邀请加入群聊的好友数量
    repeated MemberInfo member  = 3;     //本次邀请加入群聊的好友信息
    message ChatRoomInfo {
        optional string wxid  = 1;
    }
    optional ChatRoomInfo chatRoomInfo  = 4;     //群聊wxid
    optional int32 unknown5  = 5;
}

message AddChatRoomMemberResponse {
    message Result {
        optional int32 code  = 1;     //错误码
        message ErrorMsg {
            optional string msg  = 1;     //错误信息
        }
        optional ErrorMsg errorMsg  = 2;
    }
    optional Result result  = 1;     //建群结果
}

message ContactInfo
{
    optional Wxid wxid  = 1;
    message Nickname {
        optional string name  = 1;
    }
    optional Nickname nickname  = 2;

    optional int32  sex  = 5;      //性别：0=>未知,1=>男,2=>女
    optional int32  type  = 8;      //好友状态:
    message RemarkName {
        optional string name  = 1;
    }
    optional RemarkName remarkName  = 10;      //备注名:为空则显示nickname

    optional string province  = 19;
    optional string city  = 20;
    optional string signature  = 21;       //签名

    optional string alias  = 30;       //微信号(未设置则显示wxid)

    optional string country  = 38;
    optional string avatarBig  = 39;
    optional string avatarSmall  = 40;
}

message VerifyFriendRequest {
    optional BaseRequest baseRequest  = 1;     //登录信息
    optional int32 opCode  = 2;     //操作code
    optional int32 unknown3  = 3;     //todo,just set 1
    message FriendInfo {
        optional string  encryptUserName  = 1;
        optional string   ticket  = 2;      //v2_name
        optional string   antiTicket  = 3;      //可不填(由getcontact返回,长108位)
        optional int32   unknown4  = 4;
        optional int32   unknown8  = 8;
    }
    optional FriendInfo friendInfo  = 4;     //好友详细信息
    optional string content  = 5;     //打招呼内容
    optional int32  unknown6  = 6;     //just set 1
    optional bytes  unknown7  = 7;
}

//好友请求响应
message VerifyUserResponse {
    optional CommonResult result  = 1;     //结果
    optional string wxid  = 2;     //wxid
}

message UpdateSnsTimeLineRequest {
    optional BaseRequest baseRequest  = 1;     //登录信息
    optional string firstPageMD5  = 2;
    optional int32 unknown3  = 3;
    optional int32 unknown4  = 4;
    optional int32 unknown5  = 5;
    optional uint64 clientLastestId  = 6;
    message Unknown7 {
        optional int32 unknown1  = 1;
        optional bytes unknown2  = 2;

    }
    optional Unknown7 unknown7  = 7;
    optional int32 unknown8  = 8;
    optional bytes unknown10  = 10;
}

message UpdateSnsTimeLineResponse {
    optional CommonResult result  = 1;
    optional string firstPageMD5  = 2;
    optional int32 count  = 3;
    message SnsTimeLine {
        optional uint64 clientId  = 1;
        optional string wxid  = 2;
        optional string nickname  = 3;
        optional string timestamp  = 4;
        message Content {
            optional int32 length  = 1;
            optional string xml  = 2;
        }
        optional Content content  = 5;
    }
    repeated SnsTimeLine snsTimeLine  = 4;
}

message InitContactRequest {
    optional string wxid  = 1;
    optional int32 contactSeq  = 2;
    optional int32 chatRoomContactSeq  = 3;
}

message InitContactResponse {
    message Result {
        optional int32 code  = 1;     //错误码
        message ErrorMsg {
            optional string msg  = 1;     //错误信息
        }
        optional ErrorMsg errorMsg  = 2;
    }
    optional Result result  = 1;
    optional int32 contactSeq = 2;
    optional int32 chatRoomContactSeq = 3;
    optional int32 continueFlag  = 4;
    repeated string wxids  = 5;
}

message GetContactInfoRequest {
    repeated string wxids  = 1;
}

message GetContactInfoResponse {
    message Result {
        optional int32 code  = 1;     //错误码
        message ErrorMsg {
            optional string msg  = 1;     //错误信息
        }
        optional ErrorMsg errorMsg  = 2;
    }
    optional Result result  = 1;

    message ContactInfoWrap {
        optional string wxid  = 1;
        optional ContactInfo contactInfo  = 3;
    }
    repeated ContactInfoWrap contactInfoWrap  = 2;
}

message OplogRequest {
    message Oplog {
        optional int32 unknown1  = 1;     //cnt?
        message Command {
            optional int32 cmdId  = 1;        //操作类型
            message Body {
                optional int32 length  = 1;
                optional bytes data  = 2;       //不同cmd_id使用不同结构体填充该字段
            }
            optional Body body  = 2;
        }
        optional Command cmd  = 2;
    }
    optional Oplog oplog  = 1;
}

message OplogResponse {
    message Result {
        optional int32 code  = 2;         //错误码  varint
        optional string msg  = 3;         //错误信息
    }
    optional Result result  = 2;     //结果
}

message UploadMsgImgRequest {
    optional BaseRequest baseRequest  = 1;
    message ClientImgId {
        optional string clientImgId  = 1;
    }
    optional ClientImgId clientImgId  = 2;
    optional Wxid from  = 3;
    optional Wxid to  = 4;
    optional int32 length  = 5;
    optional int32 startPos  = 6;
    optional int32 dataLength  = 7;
    optional Data data  = 8;
    optional int32 type  = 9; //3
    optional int32 compressType  = 11; //0
    optional int32 netType  = 12; //1
    optional int32 photoFrom  = 13; // 0
    optional int32 msgForwardType  = 29;//0
}

message UploadMsgImgResponse {
    optional CommonResult result  = 1;
}

message GetMsgImgRequest {
    optional BaseRequest baseRequest  = 1;
    optional int32 msgId  = 2;
    optional Wxid from  = 3;
    optional Wxid to  = 4;
    optional int32 length  = 5;
    optional int32 startPos  = 6;
    optional int32 dataLength  = 7;
    optional int32 compressType  = 8;
    optional uint64 newMsgId  = 9;
}

message GetMsgImgResponse {
    optional CommonResult result  = 1;
    optional int32 msgId  = 2;
    optional Wxid from  = 3;
    optional Wxid to  = 4;
    optional int32 length  = 5;
    optional int32 startPos  = 6;
    optional int32 dataLength  = 7;
    optional Data data  = 8;
    optional uint64 newMsgId  = 9;
}

message SnsPostRequest {
    optional BaseRequest baseRequest  = 1;
    message TimeLineObject {
        optional int32 len  = 1;
        optional string xml  = 2;
    }
    optional TimeLineObject timeLineObject  = 2;
    optional int32 withUserListCount  = 3 ;//0
    optional int32 privacy  = 5; //0
    optional int32 syncFlag  = 6; //0
    optional string clientId  = 7; //"sns_post_wxid_6s9sgm8usnm512_1531364268_2869876160"
    optional int32 postBgImgType  = 8; //1
    optional int32 objectSource  = 11;//0
    optional int32 blackLiskCount  = 13;//0
    optional int32 groupUserCount  = 16;//0
    message SnsPostOperationFields {
        optional bytes unknown1  = 1;
        optional bytes unknown2  = 2;
        optional bytes unknown3  = 3;
        optional int32 unknown4  = 4;
        optional int32 unknown5  = 5;
    }
    optional SnsPostOperationFields fields  = 19;
    message PoiInfo {
        optional int32 unknown1  = 1;
        optional bytes unknown2  = 2;
    }
    optional PoiInfo poiInfo  = 21;
    optional int32 mediaCount  = 24;
    message MediaInfo {
        optional int32 unknown1  = 1; //2
        optional int32 unknown2  = 2; //1
    }
    repeated MediaInfo mediaInfo  = 25;
    optional bytes weAppInfo  = 26; // ""
}

message SnsPostResponse {
    optional CommonResult result  = 1;
}

message AutoLoginRequest {
    optional AesKey aesKey  = 2;    //仅用于本次登录请求,后续通讯使用的aeskey根据服务器返回的数据做ECDH生成
    optional Ecdh ecdh  = 3;
}

message AutoLoginDeviceInfo {
    optional BaseRequest baseRequest  = 1;
    message Unknown2 {
        message Unknown1 {
            optional int32 unknown1 = 1;
            optional bytes unknown2 = 2;
        }
        optional Unknown1 unknown1  = 1;
    }
    optional Unknown2 unknown2  = 2;
    optional bytes autoLoginKey = 3;
    optional string imei  = 4;
    optional string softInfoXml  = 5;
    optional int32 unknown6  = 6;
    optional string imeiAndTimestamp  = 7;
    optional string loginDeviceName  = 9;
    optional string loginDevice  = 10;
    optional string language  = 11;
    message Unknown12 {
        optional int32 unknown6  = 6;
        optional int32 unknown7  = 7;
    }
    optional Unknown12 unknown12  = 12;
}

